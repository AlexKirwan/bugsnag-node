// Generated by CoffeeScript 1.8.0
(function() {
  var Bugsnag, Notification, apiKey, deliverStub, path, should, sinon;

  path = require("path");

  should = require("chai").should();

  sinon = require("sinon");

  Bugsnag = require("../");

  Notification = require("../lib/notification");

  apiKey = null;

  deliverStub = null;

  before(function() {
    apiKey = "71ab53572c7b45316fb894d446f2e11d";
    return Bugsnag.register(apiKey, {
      notifyReleaseStages: ["production", "development"]
    });
  });

  beforeEach(function() {
    return Bugsnag.configure({
      notifyReleaseStages: ["production", "development"]
    });
  });

  describe("Notification", function() {
    beforeEach(function() {
      return deliverStub = sinon.stub(Notification.prototype, "deliver");
    });
    afterEach(function() {
      return Notification.prototype.deliver.restore();
    });
    it("should call deliver once", function() {
      Bugsnag.notify("This is the message");
      return deliverStub.calledOnce.should.equal(true);
    });
    it("should have the correct notification format", function() {
      Bugsnag.notify("This is the message");
      deliverStub.firstCall.thisValue.should.be.an("object");
      return deliverStub.firstCall.thisValue.should.have.keys(["apiKey", "notifier", "events"]);
    });
    it("should identify the notifier properly", function() {
      Bugsnag.notify("This is the message");
      deliverStub.firstCall.thisValue.notifier.should.be.an("object");
      deliverStub.firstCall.thisValue.notifier.should.have.keys(["name", "version", "url"]);
      deliverStub.firstCall.thisValue.notifier.should.have.property("name", "Bugsnag Node Notifier");
      deliverStub.firstCall.thisValue.notifier.should.have.property("version", require("../package.json").version);
      return deliverStub.firstCall.thisValue.notifier.should.have.property("url", "https://github.com/bugsnag/bugsnag-node");
    });
    it("should contain the APIKey", function() {
      Bugsnag.notify("This is the message");
      return deliverStub.firstCall.thisValue.apiKey.should.equal(apiKey);
    });
    it("should contain an event", function() {
      Bugsnag.notify("This is the message");
      deliverStub.firstCall.thisValue.events.length.should.equal(1);
      return deliverStub.firstCall.thisValue.events[0].should.have.keys("releaseStage", "exceptions", "device", "payloadVersion", "severity", "metaData");
    });
    describe("payloadVersion", function() {
      return it("should have a payloadVersion", function() {
        Bugsnag.notify("This is the message");
        return deliverStub.firstCall.thisValue.events[0].payloadVersion.should.equal("2");
      });
    });
    describe("severity", function() {
      it("should have a default severity", function() {
        Bugsnag.notify("This is the message");
        return deliverStub.firstCall.thisValue.events[0].severity.should.equal("warning");
      });
      return it("should send a severity when passed as option to notify", function() {
        Bugsnag.notify("This is the message", {
          severity: "info"
        });
        return deliverStub.firstCall.thisValue.events[0].severity.should.equal("info");
      });
    });
    describe("userId", function() {
      return it("should send a userId when passed as option to notify", function() {
        Bugsnag.notify("This is the message", {
          userId: "TempId"
        });
        return deliverStub.firstCall.thisValue.events[0].userId.should.equal("TempId");
      });
    });
    describe("context", function() {
      return it("should send a context when passed as option to notify", function() {
        Bugsnag.notify("This is the message", {
          context: "TempContext"
        });
        return deliverStub.firstCall.thisValue.events[0].context.should.equal("TempContext");
      });
    });
    describe("hostname", function() {
      return it("should send the hostname", function() {
        Bugsnag.notify("Foo");
        return deliverStub.firstCall.thisValue.events[0].device.hostname.should.equal(require('os').hostname());
      });
    });
    describe("groupingHash", function() {
      return it("should send an groupingHash when passed as option to notify", function() {
        Bugsnag.notify("This is the message", {
          groupingHash: "groupingHashHere"
        });
        return deliverStub.firstCall.thisValue.events[0].groupingHash.should.equal("groupingHashHere");
      });
    });
    describe("appVersion", function() {
      return it("should send an appVersion when configured on Bugsnag", function() {
        Bugsnag.configure({
          appVersion: "BugsnagVersion"
        });
        Bugsnag.notify("This is the message");
        return deliverStub.firstCall.thisValue.events[0].appVersion.should.equal("BugsnagVersion");
      });
    });
    describe("releaseStage", function() {
      it("shouldnt send a notification when releaseStage isnt configured in notifyReleaseStages", function() {
        Bugsnag.configure({
          releaseStage: "test"
        });
        Bugsnag.configure({
          notifyReleaseStages: ["production"]
        });
        Bugsnag.notify("This is the message");
        return deliverStub.called.should.equal(false);
      });
      return it("should allow you to change the releaseStage", function() {
        Bugsnag.configure({
          notifyReleaseStages: ["production"],
          releaseStage: "production"
        });
        Bugsnag.notify("This is the message");
        return deliverStub.firstCall.thisValue.events[0].releaseStage.should.equal("production");
      });
    });
    describe("exceptions", function() {
      it("should only have a single well formatted exception", function() {
        Bugsnag.notify("This is the message");
        deliverStub.firstCall.thisValue.events[0].exceptions.length.should.equal(1);
        return deliverStub.firstCall.thisValue.events[0].exceptions[0].should.have.keys("errorClass", "message", "stacktrace");
      });
      it("should set errorClass and message properly", function() {
        Bugsnag.notify("This is the message", {
          errorName: "BigBadError"
        });
        deliverStub.firstCall.thisValue.events[0].exceptions[0].errorClass.should.equal("BigBadError");
        return deliverStub.firstCall.thisValue.events[0].exceptions[0].message.should.equal("This is the message");
      });
      it("should have a proper stacktrace", function() {
        Bugsnag.notify("This is the message");
        deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace.should.be.an("array");
        deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace.should.have.length.of.at.least(2);
        deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace[0].should.have.keys("file", "lineNumber", "columnNumber", "method");
        deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace[0].file.should.contain(path.sep + "error.js");
        deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace[0].lineNumber.should.be.an("number");
        deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace[0].columnNumber.should.be.an("number");
        return deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace[0].method.should.equal("Error");
      });
      return it("should set projectRoot according to configuration", function() {
        Bugsnag.configure({
          projectRoot: __dirname
        });
        Bugsnag.notify("This is the message");
        deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace[0].should.not.have.property("inProject");
        return deliverStub.firstCall.thisValue.events[0].exceptions[0].stacktrace[3].should.have.property("inProject", true);
      });
    });
    describe("metaData", function() {
      it("should allow configured metadata on Bugsnag object", function() {
        Bugsnag.metaData = {
          key: "value"
        };
        Bugsnag.notify("This is the message");
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.keys("key");
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.property("key", "value");
        return Bugsnag.metaData = null;
      });
      it("should allow configured metadata on Bugsnag notify", function() {
        Bugsnag.notify("This is the message", {
          key: "value"
        });
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.keys("key");
        return deliverStub.firstCall.thisValue.events[0].metaData.should.have.property("key", "value");
      });
      it("should merge metadata on Bugsnag notify", function() {
        Bugsnag.metaData = {
          key: "value"
        };
        Bugsnag.notify("This is the message", {
          key1: "value1"
        });
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.keys("key", "key1");
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.property("key", "value");
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.property("key1", "value1");
        return Bugsnag.metaData = null;
      });
      return it("should overwrite metadata on clashing Bugsnag notify", function() {
        Bugsnag.metaData = {
          key: "value"
        };
        Bugsnag.notify("This is the message", {
          key: "value1"
        });
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.keys("key");
        deliverStub.firstCall.thisValue.events[0].metaData.should.have.property("key", "value1");
        return Bugsnag.metaData = null;
      });
    });
    return describe("autoNotify", function() {
      return it("should autoNotify with a default severity", function(done) {
        return Bugsnag.autoNotify({}, function() {
          process.nextTick(function() {
            var e;
            try {
              deliverStub.calledOnce.should.equal(true);
              deliverStub.firstCall.thisValue.events[0].severity.should.equal("error");
              return done();
            } catch (_error) {
              e = _error;
              return done(e);
            }
          });
          throw new Error();
        });
      });
    });
  });

}).call(this);
